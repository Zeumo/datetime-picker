/*
 *  datepicker.js 0.0.0
 *  https://github.com/Zeumo/datepicker.js
 *
 *  /!\ Don't edit this file directly!
 *  It was generated by the datepicker.js build system.
 */

(function(window) {
  var Picker, pluginName = 'picker';

  Picker = function(el, options) {
  this.$el   = $(el);
  this.$body = $('body');

  this.options = _.extend({
    dateFormat: 'MM/DD/YYYY',
    timeFormat: 'h:mm A',
    template: JST.datepicker,
  }, options);

  this.events = {
    'focus': this.show
  };

  this.pickerEvents = {
    'click .done': this.done,
    'change [name=date]': this.onChangeDate,
    'change [name=time]': this.onChangeTime
  };

  this.$picker = $(this.options.template(this.dateTime()));

  this.setDateTime(this.dateTime());

  this.delegateEvents(this.events, this.$el);
  this.delegateEvents(this.pickerEvents, this.$picker);
  this.handleDocumentClose();

  this.render();
};

Picker.prototype.delegateEvents = function(events, $el) {
  _(events).each(function(method, key) {
    var match     = key.match(/^(\S+)\s*(.*)$/);
    var eventName = match[1];
    var handler   = match[2];
    method        = _.bind(method, this);

    $el.on(eventName, handler, method);
  }, this);
};

Picker.prototype.handleDocumentClose = function() {
  $(document).on('click', _.bind(function(e) {
    if (e.target.tagName === 'INPUT') return;
    if (e.target.tagName === 'TD') return;

    if (!$(e.target).closest('#datepicker').length) {
      this.close();
    }
  }, this));
};

Picker.prototype.onChangeDate = function(e) {
  this.setDateTime({
    date: e.currentTarget.value,
    time: this.$picker.find('[name=time]').val()
  });

  this.updateCalendar();
};

Picker.prototype.onChangeTime = function(e) {
  this.setDateTime({
    date: this.$picker.find('[name=date]').val(),
    time: e.currentTarget.value.toUpperCase()
  });
};

Picker.prototype.show = function() {
  var elBottom = this.$el.height() + this.$el.offset().top;
  var elLeft    = this.$el.offset().left;

  this.$picker.css({
    top: elBottom + 10 + 'px',
    left: elLeft + 'px',
    position: 'absolute'
  });

  this.closeAll();
  this.$body.append(this.$picker);
};

Picker.prototype.closeAll = function() {
  $('#datepicker').detach();
};

Picker.prototype.close = function() {
  this.$picker.detach();
};

Picker.prototype.done = function(e) {
  e.preventDefault();
  this.close();
};

Picker.prototype.dateTime = function(offsetHours) {
  offsetHours = offsetHours || 1;

  if (this.hasPrecedingPicker()) {
    offsetHours += 1;
  }

  return {
    date: moment().format(this.options.dateFormat),
    time: moment().add(offsetHours, 'hour').startOf('hour')
            .format(this.options.timeFormat)
  };
};

Picker.prototype.setDateTime = function(obj) {
  var date = obj.date,
      time = obj.time,
      val, m;

  // Normalize minutes
  if (!(/\d:\d{2}/).test(time)) {
    time = time.replace(/(^\d+)/, "$1:00");
  }

  // Normalize spacing
  if (!(/\s[am|pm]/i).test(time)) {
    time = time.replace(/(am|pm)/i, " $1");
  }

  m = moment(date + ' ' + time);

  if (!m.isValid()) {
    var datetime = this.dateTime();
    m   = moment(datetime.date + ' ' + datetime.time);
  }

  val = m.format(this.options.dateFormat + ' ' + this.options.timeFormat);

  this.$el.val(val);

  if (this.$picker) {
    this.$picker.find('[name=date]').val(m.format(this.options.dateFormat));
    this.$picker.find('[name=time]').val(m.format(this.options.timeFormat));
  }
};

Picker.prototype.hasPrecedingPicker = function() {
  var dtp = this.$el.siblings('input').data(pluginName);
  if (dtp) return true;
};

Picker.prototype.initializeCalendar = function() {
  this.calendarEvents = {
    'changeDate': this.onCalendarChangeDate
  };

  this.$calendar = this.$picker.find('.calendar').datepicker({
    startDate: '-0d'
  });

  this.updateCalendar();
  this.delegateEvents(this.calendarEvents, this.$calendar);
};

Picker.prototype.updateCalendar = function() {
  this.$calendar.datepicker('update',
    this.$picker.find('[name=date]').val());
};

Picker.prototype.onCalendarChangeDate = function(e) {
  var date = e.format(),
      $date = this.$picker.find('[name=date]'),
      $time = this.$picker.find('[name=time]');

  if (date) {
    $date.val(date);

    this.setDateTime({
      date: date,
      time: $time.val()
    });
  }
};


Picker.prototype.render = function() {
  this.initializeCalendar();
};

$.fn[pluginName] = function (options) {
  this.each(function() {
    if (!$.data(this, pluginName)) {
      $.data(this, pluginName, new Picker(this, options));
    }
  });
  return this;
};

this["JST"] = this["JST"] || {};
this["JST"]["datepicker"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div id=\"datepicker\">\n  <div class=\"row\">\n    <div class=\"col-lg-6\">\n      <label for=\"date-picker\">Date</label>\n      <input type=\"text\" value=\"";
  if (helper = helpers.date) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.date); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" name=\"date\" id=\"date-picker\" class=\"form-control\">\n    </div>\n    <div class=\"col-lg-6\">\n    <label for=\"time-picker\">Time</label>\n      <input type=\"text\" value=\"";
  if (helper = helpers.time) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.time); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" name=\"time\" id=\"time-picker\" class=\"form-control\">\n    </div>\n  </div>\n\n  <div class=\"calendar\"></div>\n\n  <a href=\"#\" class=\"btn btn-primary done\">Done</a>\n</div>\n";
  return buffer;
  });

  window.Picker = Picker;
}(this));
